{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst API_BASE_URL = environment.apiUrl + 'users/';\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.authStatusListener = new Subject();\n      this.authStatus = false;\n      this.tokenTimer = null;\n      this.userId = null;\n    }\n\n    getAuthStatus() {\n      return this.authStatus;\n    }\n\n    getAuthStatusListener() {\n      return this.authStatusListener.asObservable();\n    }\n\n    getToken() {\n      return this.token;\n    }\n\n    getUserId() {\n      return this.userId;\n    }\n\n    createUser(authData) {\n      this.http.post(API_BASE_URL + 'signup', authData).subscribe(resp => {\n        console.log(resp);\n        this.router.navigate(['/']);\n      }, error => {\n        console.log(error);\n        this.authStatusListener.next(false);\n      });\n    }\n\n    autoAuthUser() {\n      const authInfo = this.getAuthData();\n\n      if (authInfo) {\n        const expiresIn = authInfo.expirationDate.getTime() - new Date().getTime();\n\n        if (expiresIn > 0) {\n          this.token = authInfo.token;\n          this.authStatus = true;\n          this.tokenTimer = setTimeout(() => {\n            this.logout();\n          }, expiresIn);\n          this.authStatusListener.next(true);\n        }\n      }\n    }\n\n    login(authData) {\n      this.http.post(API_BASE_URL + 'login', authData).subscribe(resp => {\n        console.log(resp);\n        this.token = resp.data.token;\n\n        if (this.token) {\n          const expiresIn = resp.data.expiresIn;\n          this.tokenTimer = setTimeout(() => {\n            this.logout();\n          }, expiresIn * 1000);\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresIn * 1000);\n          this.userId = resp.data.userId;\n          this.saveAuthData(this.token, expirationDate, this.userId);\n          this.authStatusListener.next(true);\n          this.authStatus = true;\n          this.router.navigate(['/']);\n        }\n      }, err => {\n        console.log(err);\n        this.authStatusListener.next(false);\n      });\n    }\n\n    logout() {\n      this.token = null;\n      this.userId = null;\n      this.authStatus = false;\n      this.authStatusListener.next(false);\n      clearTimeout(this.tokenTimer);\n      this.clearAuthData();\n      this.router.navigate(['/']);\n    }\n\n    saveAuthData(token, expirationDate, userId) {\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expiration\", expirationDate.toISOString());\n      localStorage.setItem(\"userId\", userId);\n    }\n\n    clearAuthData() {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"expiration\");\n      localStorage.removeItem(\"userId\");\n    }\n\n    getAuthData() {\n      const token = localStorage.getItem(\"token\");\n      const expirationDate = localStorage.getItem(\"expiration\");\n      const userId = localStorage.getItem(\"userId\");\n\n      if (token) {\n        return {\n          token: token,\n          expirationDate: new Date(expirationDate),\n          userId: userId\n        };\n      }\n\n      return null;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}