{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { imageTypeValidator } from './image-type.validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../tasks.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/progress-spinner\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/button\";\n\nfunction CreateTaskComponent_mat_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\n\nfunction CreateTaskComponent_mat_card_1_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Please enter title\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreateTaskComponent_mat_card_1_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Please upload image\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreateTaskComponent_mat_card_1_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelement(1, \"img\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r5.imagePreview, i0.ɵɵsanitizeUrl)(\"alt\", ctx_r5.taskForm.value.title);\n  }\n}\n\nfunction CreateTaskComponent_mat_card_1_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Please enter description\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreateTaskComponent_mat_card_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-card\");\n    i0.ɵɵelementStart(1, \"form\", 1);\n    i0.ɵɵlistener(\"submit\", function CreateTaskComponent_mat_card_1_Template_form_submit_1_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onSaveTask();\n    });\n    i0.ɵɵelementStart(2, \"mat-form-field\");\n    i0.ɵɵelementStart(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Task Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 2);\n    i0.ɵɵtemplate(6, CreateTaskComponent_mat_card_1_mat_error_6_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\");\n    i0.ɵɵelementStart(8, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function CreateTaskComponent_mat_card_1_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r8);\n\n      const _r3 = i0.ɵɵreference(11);\n\n      return _r3.click();\n    });\n    i0.ɵɵtext(9, \"Pick an image\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"input\", 4, 5);\n    i0.ɵɵlistener(\"change\", function CreateTaskComponent_mat_card_1_Template_input_change_10_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onImagePicked($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, CreateTaskComponent_mat_card_1_mat_error_12_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, CreateTaskComponent_mat_card_1_div_13_Template, 2, 2, \"div\", 6);\n    i0.ɵɵelementStart(14, \"mat-form-field\");\n    i0.ɵɵelementStart(15, \"mat-label\");\n    i0.ɵɵtext(16, \"Task Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(17, \"textarea\", 7);\n    i0.ɵɵtemplate(18, CreateTaskComponent_mat_card_1_mat_error_18_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"button\", 8);\n    i0.ɵɵtext(20);\n    i0.ɵɵpipe(21, \"uppercase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.taskForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.taskForm.get(\"title\").invalid);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.taskForm.get(\"image\").invalid && ctx_r1.taskForm.get(\"image\").touched);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.imagePreview && ctx_r1.imagePreview !== \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.taskForm.get(\"description\").invalid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(21, 6, ctx_r1.mode));\n  }\n}\n\nexport let CreateTaskComponent = /*#__PURE__*/(() => {\n  class CreateTaskComponent {\n    constructor(tasksService, route) {\n      this.tasksService = tasksService;\n      this.route = route; // enteredTitle =\"\";\n      // enteredDescription=\"\";\n      // @Output() taskCreated= new EventEmitter<Task>();\n\n      this.mode = 'create';\n      this.taskId = null;\n      this.isLoading = false;\n      this.imagePreview = null;\n    }\n\n    ngOnInit() {\n      this.route.paramMap.subscribe(paramMap => {\n        if (paramMap.has(\"taskId\")) {\n          this.taskForm = new FormGroup({\n            'title': new FormControl(null, {\n              validators: [Validators.required, Validators.minLength(3)]\n            }),\n            'description': new FormControl(null, {\n              validators: [Validators.required]\n            }),\n            'image': new FormControl(null, {\n              validators: [Validators.required]\n            })\n          });\n          this.mode = 'edit';\n          this.taskId = paramMap.get('taskId');\n          this.isLoading = true;\n          this.tasksService.getTask(this.taskId).subscribe(resp => {\n            this.isLoading = false;\n            this.task = resp.data;\n            this.taskForm.setValue({\n              'title': this.task.title,\n              'description': this.task.description,\n              'image': this.task.imagePath\n            });\n          });\n        } else {\n          this.taskForm = new FormGroup({\n            'title': new FormControl(null, {\n              validators: [Validators.required, Validators.minLength(3)]\n            }),\n            'description': new FormControl(null, {\n              validators: [Validators.required]\n            }),\n            'image': new FormControl(null, {\n              validators: [Validators.required, imageTypeValidator]\n            })\n          });\n          this.mode = 'create';\n          this.taskId = null;\n        }\n      });\n    }\n\n    onImagePicked(event) {\n      console.log(\"type of image\", typeof this.taskForm.value.image);\n      const file = event.target.files[0];\n      this.taskForm.patchValue({\n        image: file\n      });\n      this.taskForm.get('image').updateValueAndValidity();\n      this.imageToDataUrl(file);\n    }\n\n    imageToDataUrl(file) {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        this.imagePreview = reader.result;\n      };\n\n      reader.readAsDataURL(file);\n    }\n\n    onSaveTask() {\n      this.taskForm.markAllAsTouched();\n\n      if (!this.taskForm.valid) {\n        return;\n      }\n\n      const task = {\n        _id: null,\n        title: this.taskForm.value.title,\n        description: this.taskForm.value.description,\n        imagePath: this.taskForm.value.image,\n        creator: \"\"\n      };\n\n      if (this.mode == 'edit') {\n        task._id = this.task._id;\n        task.creator = this.task.creator;\n        this.tasksService.updateTask(task);\n      } else {\n        this.tasksService.addTask(task, this.taskForm.value.image);\n      }\n\n      this.taskForm.reset();\n    }\n\n  }\n\n  CreateTaskComponent.ɵfac = function CreateTaskComponent_Factory(t) {\n    return new (t || CreateTaskComponent)(i0.ɵɵdirectiveInject(i1.TasksService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  CreateTaskComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateTaskComponent,\n    selectors: [[\"app-task-create\"]],\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [3, \"formGroup\", \"submit\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"title\"], [\"mat-stroked-button\", \"\", \"type\", \"button\", 3, \"click\"], [\"type\", \"file\", 3, \"change\"], [\"filePicker\", \"\"], [\"class\", \"image-preview\", 4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"description\", \"formControlName\", \"description\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"], [1, \"image-preview\"], [3, \"src\", \"alt\"]],\n    template: function CreateTaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CreateTaskComponent_mat_spinner_0_Template, 1, 0, \"mat-spinner\", 0);\n        i0.ɵɵtemplate(1, CreateTaskComponent_mat_card_1_Template, 22, 8, \"mat-card\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n      }\n    },\n    directives: [i3.NgIf, i4.MatSpinner, i5.MatCard, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i7.MatFormField, i7.MatLabel, i8.MatInput, i6.DefaultValueAccessor, i6.NgControlStatus, i6.FormControlName, i9.MatButton, i7.MatError],\n    pipes: [i3.UpperCasePipe],\n    styles: [\"mat-form-field[_ngcontent-%COMP%], textarea[_ngcontent-%COMP%]{width:100%}mat-spinner[_ngcontent-%COMP%]{margin:auto}input[type=file][_ngcontent-%COMP%]{visibility:hidden}.image-preview[_ngcontent-%COMP%]{height:5rem;margin:1rem 0}.image-preview[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{height:100%}\"]\n  });\n  return CreateTaskComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}